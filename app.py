import streamlit as st
import pandas as pd
import ast
import altair as alt # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –¢–µ–≥–æ–≤ –ö–ª–∏–µ–Ω—Ç–æ–≤ –ú–°–ë",
    page_icon="üìä",
    layout="wide"
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data(file_path="client_tags_results_csv.csv"):
    try:
        df = pd.read_csv(file_path)
        # df.to_csv("client_tags_results_csv.csv", index=False)
        if not df.empty and 'TAGS' in df.columns:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ TAGS, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞-—Å–ø–∏—Å–æ–∫
            if isinstance(df['TAGS'].iloc[0], str) and df['TAGS'].iloc[0].strip().startswith('['):
                try:
                    df['TAGS_List'] = df['TAGS'].apply(
                        lambda x: ast.literal_eval(x) if pd.notna(x) and isinstance(x, str) and x.strip().startswith('[') and x.strip().endswith(']') else x
                    )
                except (ValueError, SyntaxError):
                     df['TAGS_List'] = df['TAGS'].apply(
                        lambda x: [tag.strip() for tag in x.split(',')] if pd.notna(x) and isinstance(x, str) else []
                    )
            elif isinstance(df['TAGS'].iloc[0], str):
                 df['TAGS_List'] = df['TAGS'].apply(
                        lambda x: [tag.strip() for tag in x.split(',')] if pd.notna(x) and isinstance(x, str) else []
                    )
            else:
                df['TAGS_List'] = df['TAGS']
            
            df['TAGS_List'] = df['TAGS_List'].apply(lambda x: x if isinstance(x, list) else [])
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–µ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ st.dataframe
            df['TAGS_String'] = df['TAGS_List']#.apply(lambda x: ", ".join(x) if x else "–ù–µ—Ç —Ç–µ–≥–æ–≤")
        else:
             st.warning("–ö–æ–ª–æ–Ω–∫–∞ 'TAGS' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç.")
             df['TAGS_List'] = pd.Series([[] for _ in range(len(df))])
             df['TAGS_String'] = pd.Series(["–ù–µ—Ç —Ç–µ–≥–æ–≤" for _ in range(len(df))])
        return df
    except FileNotFoundError:
        st.error(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return pd.DataFrame(columns=['CLI_ID', 'CLN_NAME', 'TAGS_List', 'TAGS_String'])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel: {e}")
        return pd.DataFrame(columns=['CLI_ID', 'CLN_NAME', 'TAGS_List', 'TAGS_String'])

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.title("üìä –ê–Ω–∞–ª–∏–∑ –¢–µ–≥–æ–≤ –ö–ª–∏–µ–Ω—Ç–æ–≤ –ú–°–ë")
st.markdown("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤, –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.")

data_df = load_data()

if not data_df.empty:
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    search_name = st.sidebar.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞ (CLN_NAME):", "")
    
    all_tags_list = []
    if 'TAGS_List' in data_df.columns: # –ò—Å–ø–æ–ª—å–∑—É–µ–º TAGS_List –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤
        all_tags_list = sorted(list(set(tag for sublist in data_df['TAGS_List'] for tag in sublist)))

    selected_tags_filter = st.sidebar.multiselect(
        "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º (–∫–ª–∏–µ–Ω—Ç—ã —Å –í–°–ï–ú–ò –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏):",
        options=all_tags_list,
        default=[]
    )

    filtered_df = data_df.copy()
    if search_name:
        filtered_df = filtered_df[filtered_df['CLN_NAME'].str.contains(search_name, case=False, na=False)]
    if selected_tags_filter:
        filtered_df = filtered_df[filtered_df['TAGS_List'].apply(lambda client_tags: all(tag in client_tags for tag in selected_tags_filter))]

    st.header("–î–∞–Ω–Ω—ã–µ –ø–æ –ö–ª–∏–µ–Ω—Ç–∞–º –∏ –ò—Ö –¢–µ–≥–∞–º")

    if filtered_df.empty:
        st.warning("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        st.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(filtered_df)}")
        show_cli_id = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å CLI_ID", value=False, key="show_cli_id_checkbox")
        
        columns_to_display_in_table = ['CLN_NAME', 'TAGS_String'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º TAGS_String
        if show_cli_id:
            columns_to_display_in_table.insert(0, 'CLI_ID')
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_df_renamed = filtered_df[columns_to_display_in_table].rename(columns={'TAGS_String': '–¢–µ–≥–∏'})
        
        st.dataframe(
            display_df_renamed,
            hide_index=True,
            use_container_width=False
        )

        st.sidebar.markdown("---")
        st.sidebar.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")

        if st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤", value=True):
            st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¢–µ–≥–æ–≤ –ø–æ –ö–ª–∏–µ–Ω—Ç–∞–º")
            if not filtered_df.empty and 'TAGS_List' in filtered_df.columns:
                tag_counts_series = pd.Series([tag for sublist in filtered_df['TAGS_List'] for tag in sublist]).value_counts()
                if not tag_counts_series.empty:
                    source = pd.DataFrame({'–¢–µ–≥': tag_counts_series.index, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': tag_counts_series.values})
                    max_tags_to_show = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:", 5, len(source) if len(source)>5 else 6, min(20, len(source) if len(source)>0 else 1 ), key="tags_slider")
                    source = source.head(max_tags_to_show)

                    base_chart = alt.Chart(source).encode(
                        x=alt.X('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:Q', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤', axis=alt.Axis(grid=False)), # –£–±–∏—Ä–∞–µ–º —Å–µ—Ç–∫—É –ø–æ X –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
                        y=alt.Y('–¢–µ–≥:N', title=None, sort='-x', axis=alt.Axis(labels=False, ticks=False, domain=False)) # –°–∫—Ä—ã–≤–∞–µ–º –º–µ—Ç–∫–∏ –∏ –æ—Å—å Y —Å–ª–µ–≤–∞
                    )

                    # –°–ª–æ–π —Å –ø–æ–ª–æ—Å–∞–º–∏
                    bars = base_chart.mark_bar().encode(
                        tooltip=['–¢–µ–≥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] # –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
                    )

                    # –°–ª–æ–π —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –ø–æ–ª–æ—Å–∞—Ö
                    text_on_bars = base_chart.mark_text(
                        align='left',
                        baseline='middle',
                        dx=5,
                        color='white',
                        fontSize=10
                    ).encode(
                        text='–¢–µ–≥:N'
                    )
                    
                    # –°–ª–æ–π —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ü–µ –ø–æ–ª–æ—Å—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    text_count_end_of_bar = base_chart.mark_text(
                        align='left',
                        baseline='middle',
                        dx=5,
                        color='black',
                        fontSize=9
                    ).encode(
                        text=alt.Text('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:Q', format='.0f'), 
                    )
                    final_chart = bars + text_on_bars


                    st.altair_chart(final_chart, use_container_width=True)
                else:
                    st.write("–ù–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            else:
                st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤.")

        if st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ–≥—É", value=False):
            st.header("–ü–æ–∏—Å–∫ –ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –û–¥–Ω–æ–º—É –¢–µ–≥—É")
            single_tag_select = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:",
                options=[""] + all_tags_list
            )
            if single_tag_select:
                clients_with_single_tag_df = data_df[data_df['TAGS_List'].apply(lambda tags: single_tag_select in tags)]
                if not clients_with_single_tag_df.empty:
                    st.write(f"–ö–ª–∏–µ–Ω—Ç—ã —Å —Ç–µ–≥–æ–º '{single_tag_select}':")

                    display_single_tag_df = clients_with_single_tag_df[['CLN_NAME', 'TAGS_String']].rename(columns={'TAGS_String': '–¢–µ–≥–∏'})
                    st.dataframe(display_single_tag_df, hide_index=True, use_container_width=False)
                else:
                    st.write(f"–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ç–µ–≥–æ–º '{single_tag_select}'.")

    st.sidebar.markdown("---")
    st.sidebar.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data_df)} –∑–∞–ø–∏—Å–µ–π –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö.")
    if selected_tags_filter or search_name:
        st.sidebar.info(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è {len(filtered_df)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
else:
    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")

st.markdown("---")
st.markdown("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ç–µ–≥–æ–≤ –ú–°–ë.")